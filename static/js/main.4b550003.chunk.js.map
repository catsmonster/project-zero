{"version":3,"sources":["components/Nav/Nav.js","components/First/First.js","components/Second/Second.js","App.js","serviceWorker.js","index.js"],"names":["Nav","onRouteChange","setClassActive","wasClicked","setWasClicked","setFinishedLoading1","setFinishedLoading2","style","display","justifyContent","className","onClick","First","classActive","finishedLoading1","setFirstState","hideFog","setTimeout","showFog1","Second","finishedLoading2","showFog2","App","useState","route","setRoute","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAqBeA,G,YAlBH,SAAC,GAA0G,IAAzGC,EAAwG,EAAxGA,cAAeC,EAAyF,EAAzFA,eAAgBC,EAAyE,EAAzEA,WAAYC,EAA6D,EAA7DA,cAAeC,EAA8C,EAA9CA,oBAAqBC,EAAyB,EAAzBA,oBACzF,OACE,yBAAKC,MAAO,CAACC,QAAS,OAAQC,eAAgB,aAC1C,uBAAGC,UAAU,WAAWC,QAAS,WAAOV,EAAc,SAClDE,GACAD,EAAe,UAEnBG,GAAoB,GACpBD,GAAc,KALd,QAOA,uBAAGM,UAAU,WAAWC,QAAS,WAAOV,EAAc,UACtDG,GAAc,GACdE,GAAoB,KAFpB,aCwCKM,G,WAlDD,SAAC,GAAsE,IAArEC,EAAoE,EAApEA,YAAaV,EAAuD,EAAvDA,WAAYW,EAA2C,EAA3CA,iBAAkBT,EAAyB,EAAzBA,oBACjDU,EAAgB,WAClB,OACI,6BACI,yBAAKL,UAAU,cAEf,yBAAKA,UAAS,iBAAYG,OAoBhCG,EAAU,WACZX,GAAoB,IAkBxB,OAdMF,EAEI,6BArBO,WACb,IAAKW,EAED,OADAG,WAAWD,EAAS,KAEhB,6BACI,yBAAKN,UAAS,SAEd,yBAAKA,UAAS,SAefQ,GACAH,KAKTA,MCVKI,EA9BA,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,iBAAkBd,EAAyB,EAAzBA,oBAezBU,EAAU,WACdV,GAAoB,IAGtB,OACI,6BAnBa,WACb,IAAKc,EAED,OADAH,WAAWD,EAAS,KAEhB,6BACI,yBAAKN,UAAS,SAEd,yBAAKA,UAAS,UAarBW,GACD,yBAAKX,UAAU,aAEf,yBAAKA,UAAU,aCSZY,MA7Bf,WAAgB,IAAD,EAEaC,mBAAS,SAFtB,mBAENC,EAFM,KAECC,EAFD,OAIyBF,mBAAS,UAJlC,mBAINV,EAJM,KAIOX,EAJP,OAMuBqB,oBAAS,GANhC,mBAMNpB,EANM,KAMMC,EANN,OAQmCmB,oBAAS,GAR5C,mBAQNT,EARM,KAQYT,EARZ,OAUmCkB,oBAAS,GAV5C,mBAUNH,EAVM,KAUYd,EAVZ,KAiBb,OACE,yBAAKI,UAAU,OACb,kBAAC,EAAD,CAAKL,oBAAqBA,EAAqBC,oBAAqBA,EAAqBF,cAAeA,EAAeD,WAAYA,EAAYD,eAAgBA,EAAgBD,cAP7J,SAACuB,GACrBC,EAASD,MAOI,UAAVA,EACG,kBAAC,EAAD,CAAOnB,oBAAqBA,EAAqBS,iBAAkBA,EAAkBX,WAAYA,EAAYU,YAAaA,IAE1H,kBAAC,EAAD,CAAQP,oBAAqBA,EAAqBc,iBAAkBA,MClB1DM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4b550003.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = ({onRouteChange, setClassActive, wasClicked, setWasClicked, setFinishedLoading1, setFinishedLoading2}) => {\r\n    return (\r\n      <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n          <p className='nav grow' onClick={() => {onRouteChange('first');\r\n          if (wasClicked) {\r\n              setClassActive('state3');\r\n          }\r\n          setFinishedLoading1(false);\r\n          setWasClicked(true);\r\n          }}>Home</p>\r\n          <p className='nav grow' onClick={() => {onRouteChange('second');\r\n          setWasClicked(true);\r\n          setFinishedLoading2(false);\r\n          }}>Tables</p>\r\n      </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './First.css';\r\n\r\nconst First = ({classActive, wasClicked, finishedLoading1, setFinishedLoading1}) => {\r\n    const setFirstState = () => {\r\n        return (\r\n            <div>\r\n                <div className='newClass1'>\r\n                </div>\r\n                <div className={`state1 ${classActive}`}>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const showFog1 = () => {\r\n        if (!finishedLoading1) {\r\n            setTimeout(hideFog, 2000);\r\n            return (\r\n                <div>\r\n                    <div className={`fog2`}>\r\n                    </div>\r\n                    <div className={`fog`}>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const hideFog = () => {\r\n        setFinishedLoading1(true);\r\n    };\r\n\r\n    const renderWithFog = () => {\r\n      if (wasClicked) {\r\n          return (\r\n              <div>\r\n                  {showFog1()}\r\n                  {setFirstState()}\r\n              </div>\r\n          );\r\n      } else {\r\n          return (\r\n          setFirstState()\r\n      );\r\n      }\r\n    };\r\n\r\n    return (\r\n            renderWithFog()\r\n    );\r\n};\r\n\r\nexport default First;","import React from 'react';\r\nimport '../First/First.css';\r\n\r\nconst Second = ({finishedLoading2, setFinishedLoading2}) => {\r\n    const showFog2 = () => {\r\n        if (!finishedLoading2) {\r\n            setTimeout(hideFog, 2000);\r\n            return (\r\n                <div>\r\n                    <div className={`fog4`}>\r\n                    </div>\r\n                    <div className={`fog3`}>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const hideFog = () => {\r\n      setFinishedLoading2(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {showFog2()}\r\n            <div className='newClass'>\r\n            </div>\r\n            <div className='state2'>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Second;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Nav from \"./components/Nav/Nav\";\r\nimport 'tachyons';\r\nimport First from \"./components/First/First\";\r\nimport Second from \"./components/Second/Second\";\r\n\r\nfunction App() {\r\n\r\n  const [route, setRoute] = useState(\"first\");\r\n\r\n  const [classActive, setClassActive] = useState('state1');\r\n\r\n  const [wasClicked, setWasClicked] = useState(false);\r\n\r\n  const [finishedLoading1, setFinishedLoading1] = useState(false);\r\n\r\n  const [finishedLoading2, setFinishedLoading2] = useState(false);\r\n\r\n  const onRouteChange = (route) => {\r\n    setRoute(route);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Nav setFinishedLoading1={setFinishedLoading1} setFinishedLoading2={setFinishedLoading2} setWasClicked={setWasClicked} wasClicked={wasClicked} setClassActive={setClassActive} onRouteChange={onRouteChange}/>\r\n      {route === 'first'?\r\n          <First setFinishedLoading1={setFinishedLoading1} finishedLoading1={finishedLoading1} wasClicked={wasClicked} classActive={classActive}/>\r\n      :\r\n          <Second setFinishedLoading2={setFinishedLoading2} finishedLoading2={finishedLoading2} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}