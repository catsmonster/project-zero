{"version":3,"sources":["components/Nav/Nav.js","components/First/First.js","components/Second/Second.js","components/Third/Third.js","App.js","serviceWorker.js","index.js"],"names":["Nav","onRouteChange","setClassActive","wasClicked","setWasClicked","setFinishedLoading1","setFinishedLoading2","route","setFinishedLoading3","style","display","justifyContent","className","onClick","First","classActive","finishedLoading1","isThird","changeIsThird","setFirstState","Second","finishedLoading2","hideFog","setTimeout","showFog2","addNewClassDiv","Third","finishedLoading3","isThirdTrue","App","useState","setRoute","setIsThird","changeStateThird","changeThirdTrue","navBar","showFog1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfdeab1a.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = ({onRouteChange, setClassActive, wasClicked, setWasClicked, setFinishedLoading1, setFinishedLoading2, route, setFinishedLoading3}) => {\r\n    return (\r\n      <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n          <p className='nav grow' onClick={() => {onRouteChange('first');\r\n          if (wasClicked && (route==='second' || route ==='third')) {\r\n              setClassActive('animationFirst');\r\n          setFinishedLoading1(false);\r\n          setWasClicked(true);\r\n          }\r\n          }}>Home</p>\r\n          <p className='nav grow' onClick={() => {onRouteChange('second');\r\n          setWasClicked(true);\r\n          if (route==='first' || route==='third') {\r\n              setFinishedLoading2(false);\r\n          }\r\n          }}>Tables</p>\r\n          <p className='nav grow' onClick={() => {onRouteChange('third');\r\n              setWasClicked(true);\r\n              if (route==='first' || route === 'second') {\r\n                  setFinishedLoading3(false);\r\n              }\r\n          }}>Third</p>\r\n      </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './First.css';\r\n\r\nconst First = ({classActive, wasClicked, finishedLoading1, setFinishedLoading1, isThird, changeIsThird}) => {\r\n\r\n    const addNewClassDiv = () => {\r\n        if (!finishedLoading1 && wasClicked && !isThird) {\r\n            return (\r\n                <div className='transitionFirstAndSecond1'>\r\n                </div>\r\n            );\r\n        } else if (!finishedLoading1 && wasClicked && isThird) {\r\n            return (\r\n                <div className='transitionFirstAndThird1'>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n\r\n    const setFirstState = () => {\r\n        return (\r\n            <div>\r\n                {addNewClassDiv()}\r\n                <div className={`state1 ${classActive}`}>\r\n                    <p>this is a paragraph on the fist page</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n    const renderWithFog = () => {\r\n      if (wasClicked) {\r\n          return (\r\n              <div>\r\n                  {setFirstState()}\r\n                  {changeIsThird()}\r\n              </div>\r\n          );\r\n      } else {\r\n          return (\r\n          setFirstState()\r\n      );\r\n      }\r\n    };\r\n    return (\r\n            renderWithFog()\r\n    );\r\n};\r\n\r\nexport default First;","import React from 'react';\r\nimport '../First/First.css';\r\n\r\nconst Second = ({finishedLoading2, setFinishedLoading2, isThird, changeIsThird}) => {\r\n\r\n    const addNewClassDiv = () => {\r\n        if (!finishedLoading2) {\r\n            return (\r\n                <div className='transitionFirstAndSecond2'>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const showFog2 = () => {\r\n        if (!finishedLoading2) {\r\n            setTimeout(hideFog, 1500);\r\n            return (\r\n                <div>\r\n                    <div className={`fog4`}>\r\n                    </div>\r\n                    <div className={`fog3`}>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n    const hideFog = () => {\r\n      setFinishedLoading2(true);\r\n    };\r\n    if (!isThird) {\r\n        return (\r\n            <div>\r\n                {showFog2()}\r\n                {addNewClassDiv()}\r\n                {changeIsThird()}\r\n                <div className='state2'>\r\n                    <p>this is a paragraph on the second page</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n          <div>\r\n              <h1>it's third</h1>\r\n          </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Second;","import React from 'react';\r\nimport '../First/First.css';\r\n\r\nconst Third = ({finishedLoading3, setFinishedLoading3, isThirdTrue}) => {\r\n    const addNewClassDiv = () => {\r\n        if (!finishedLoading3) {\r\n            return (\r\n                <div className='transitionFirstAndThird2'>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const showFog2 = () => {\r\n        if (!finishedLoading3) {\r\n            setTimeout(hideFog, 1500);\r\n            return (\r\n                <div>\r\n                    <div className={`fog4`}>\r\n                    </div>\r\n                    <div className={`fog3`}>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    const hideFog = () => {\r\n        setFinishedLoading3(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {showFog2()}\r\n            {addNewClassDiv()}\r\n            {isThirdTrue()}\r\n            <div className='state3'>\r\n                <p>this is a paragraph on the third page</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Third;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Nav from \"./components/Nav/Nav\";\r\nimport 'tachyons';\r\nimport First from \"./components/First/First\";\r\nimport Second from \"./components/Second/Second\";\r\nimport Third from \"./components/Third/Third\";\r\n\r\nfunction App() {\r\n\r\n  const [route, setRoute] = useState(\"first\");\r\n\r\n  const [classActive, setClassActive] = useState('state1');\r\n\r\n  const [wasClicked, setWasClicked] = useState(false);\r\n\r\n  const [finishedLoading1, setFinishedLoading1] = useState(false);\r\n\r\n  const [finishedLoading2, setFinishedLoading2] = useState(false);\r\n\r\n  const [finishedLoading3, setFinishedLoading3] = useState(false);\r\n\r\n  const [isThird, setIsThird] = useState(false);\r\n\r\n  const onRouteChange = (route) => {\r\n    setRoute(route);\r\n  };\r\n\r\n  const changeStateThird = () => {\r\n    setIsThird(false);\r\n  };\r\n\r\n  const changeIsThird = () => {\r\n    setTimeout(changeStateThird,1500);\r\n  };\r\n\r\n  const changeThirdTrue = () => {\r\n    setIsThird(true);\r\n  };\r\n\r\n  const isThirdTrue = () => {\r\n    setTimeout(changeThirdTrue, 0);\r\n  };\r\n\r\n  const showFog1 = () => {\r\n    if (!finishedLoading1) {\r\n      setTimeout(hideFog, 1500);\r\n      return (\r\n          <div>\r\n            <div className={`fog2`}>\r\n            </div>\r\n            <div className={`fog`}>\r\n            </div>\r\n          </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const hideFog = () => {\r\n    setFinishedLoading1(true);\r\n  };\r\n\r\n  const navBar = () => {\r\n    return (\r\n          <Nav setFinishedLoading3={setFinishedLoading3} route={route} setFinishedLoading1={setFinishedLoading1} setFinishedLoading2={setFinishedLoading2} setWasClicked={setWasClicked} wasClicked={wasClicked} setClassActive={setClassActive} onRouteChange={onRouteChange}/>\r\n          );\r\n  };\r\n\r\n  if (route==='first') {\r\n    if (!finishedLoading1 && wasClicked) {\r\n      return (\r\n          <div>\r\n            {showFog1()}\r\n            {navBar()}\r\n            <First changeIsThird={changeIsThird} isThird={isThird} setFinishedLoading1={setFinishedLoading1}\r\n                   finishedLoading1={finishedLoading1} wasClicked={wasClicked} classActive={classActive}/>\r\n          </div>\r\n      );\r\n    } else {\r\n      return (\r\n          <div>\r\n            {navBar()}\r\n            <First changeIsThird={changeIsThird} isThird={isThird} setFinishedLoading1={setFinishedLoading1}\r\n                   finishedLoading1={finishedLoading1} wasClicked={wasClicked} classActive={classActive}/>\r\n          </div>\r\n      )\r\n    }\r\n  } else if (route==='second') {\r\n    return (\r\n        <div>\r\n            {navBar()}\r\n            <Second isThird={isThird} changeIsThird={changeIsThird} setFinishedLoading2={setFinishedLoading2}\r\n            finishedLoading2={finishedLoading2}/>\r\n        </div>\r\n    );} else if (route==='third') {\r\n    return (\r\n        <div>\r\n          {navBar()}\r\n          <Third isThirdTrue={isThirdTrue} setFinishedLoading3={setFinishedLoading3} finishedLoading3={finishedLoading3} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}